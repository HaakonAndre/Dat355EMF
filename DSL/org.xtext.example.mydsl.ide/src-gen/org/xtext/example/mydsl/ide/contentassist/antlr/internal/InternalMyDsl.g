/*
 * generated by Xtext 2.24.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleHistory
entryRuleHistory
:
{ before(grammarAccess.getHistoryRule()); }
	 ruleHistory
{ after(grammarAccess.getHistoryRule()); } 
	 EOF 
;

// Rule History
ruleHistory 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHistoryAccess().getActionlistAssignment()); }
		(rule__History__ActionlistAssignment)*
		{ after(grammarAccess.getHistoryAccess().getActionlistAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCharacterAction
entryRuleCharacterAction
:
{ before(grammarAccess.getCharacterActionRule()); }
	 ruleCharacterAction
{ after(grammarAccess.getCharacterActionRule()); } 
	 EOF 
;

// Rule CharacterAction
ruleCharacterAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCharacterActionAccess().getGroup()); }
		(rule__CharacterAction__Group__0)
		{ after(grammarAccess.getCharacterActionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleActions
entryRuleActions
:
{ before(grammarAccess.getActionsRule()); }
	 ruleActions
{ after(grammarAccess.getActionsRule()); } 
	 EOF 
;

// Rule Actions
ruleActions 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionsAccess().getAlternatives()); }
		(rule__Actions__Alternatives)
		{ after(grammarAccess.getActionsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRest
entryRuleRest
:
{ before(grammarAccess.getRestRule()); }
	 ruleRest
{ after(grammarAccess.getRestRule()); } 
	 EOF 
;

// Rule Rest
ruleRest 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRestAccess().getAlternatives()); }
		(rule__Rest__Alternatives)
		{ after(grammarAccess.getRestAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLongRest
entryRuleLongRest
:
{ before(grammarAccess.getLongRestRule()); }
	 ruleLongRest
{ after(grammarAccess.getLongRestRule()); } 
	 EOF 
;

// Rule LongRest
ruleLongRest 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLongRestAccess().getGroup()); }
		(rule__LongRest__Group__0)
		{ after(grammarAccess.getLongRestAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleShortRest
entryRuleShortRest
:
{ before(grammarAccess.getShortRestRule()); }
	 ruleShortRest
{ after(grammarAccess.getShortRestRule()); } 
	 EOF 
;

// Rule ShortRest
ruleShortRest 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShortRestAccess().getGroup()); }
		(rule__ShortRest__Group__0)
		{ after(grammarAccess.getShortRestAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSpell
entryRuleSpell
:
{ before(grammarAccess.getSpellRule()); }
	 ruleSpell
{ after(grammarAccess.getSpellRule()); } 
	 EOF 
;

// Rule Spell
ruleSpell 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSpellAccess().getGroup()); }
		(rule__Spell__Group__0)
		{ after(grammarAccess.getSpellAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttack
entryRuleAttack
:
{ before(grammarAccess.getAttackRule()); }
	 ruleAttack
{ after(grammarAccess.getAttackRule()); } 
	 EOF 
;

// Rule Attack
ruleAttack 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttackAccess().getGroup()); }
		(rule__Attack__Group__0)
		{ after(grammarAccess.getAttackAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMove
entryRuleMove
:
{ before(grammarAccess.getMoveRule()); }
	 ruleMove
{ after(grammarAccess.getMoveRule()); } 
	 EOF 
;

// Rule Move
ruleMove 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMoveAccess().getGroup()); }
		(rule__Move__Group__0)
		{ after(grammarAccess.getMoveAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actions__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionsAccess().getRestParserRuleCall_0()); }
		ruleRest
		{ after(grammarAccess.getActionsAccess().getRestParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getActionsAccess().getSpellParserRuleCall_1()); }
		ruleSpell
		{ after(grammarAccess.getActionsAccess().getSpellParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getActionsAccess().getAttackParserRuleCall_2()); }
		ruleAttack
		{ after(grammarAccess.getActionsAccess().getAttackParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getActionsAccess().getMoveParserRuleCall_3()); }
		ruleMove
		{ after(grammarAccess.getActionsAccess().getMoveParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rest__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRestAccess().getLongRestParserRuleCall_0()); }
		ruleLongRest
		{ after(grammarAccess.getRestAccess().getLongRestParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getRestAccess().getShortRestParserRuleCall_1()); }
		ruleShortRest
		{ after(grammarAccess.getRestAccess().getShortRestParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CharacterAction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CharacterAction__Group__0__Impl
	rule__CharacterAction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CharacterAction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCharacterActionAccess().getCharacterKeyword_0()); }
	'Character'
	{ after(grammarAccess.getCharacterActionAccess().getCharacterKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CharacterAction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CharacterAction__Group__1__Impl
	rule__CharacterAction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CharacterAction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCharacterActionAccess().getNameAssignment_1()); }
	(rule__CharacterAction__NameAssignment_1)
	{ after(grammarAccess.getCharacterActionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CharacterAction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CharacterAction__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CharacterAction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getCharacterActionAccess().getActionsAssignment_2()); }
		(rule__CharacterAction__ActionsAssignment_2)
		{ after(grammarAccess.getCharacterActionAccess().getActionsAssignment_2()); }
	)
	(
		{ before(grammarAccess.getCharacterActionAccess().getActionsAssignment_2()); }
		(rule__CharacterAction__ActionsAssignment_2)*
		{ after(grammarAccess.getCharacterActionAccess().getActionsAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LongRest__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LongRest__Group__0__Impl
	rule__LongRest__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LongRest__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLongRestAccess().getLongRestKeyword_0()); }
	'LongRest'
	{ after(grammarAccess.getLongRestAccess().getLongRestKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LongRest__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LongRest__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LongRest__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLongRestAccess().getLevelAssignment_1()); }
	(rule__LongRest__LevelAssignment_1)
	{ after(grammarAccess.getLongRestAccess().getLevelAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShortRest__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShortRest__Group__0__Impl
	rule__ShortRest__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShortRest__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShortRestAccess().getShortRestKeyword_0()); }
	'ShortRest'
	{ after(grammarAccess.getShortRestAccess().getShortRestKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShortRest__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShortRest__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShortRest__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShortRestAccess().getHealingAssignment_1()); }
	(rule__ShortRest__HealingAssignment_1)
	{ after(grammarAccess.getShortRestAccess().getHealingAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Spell__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Spell__Group__0__Impl
	rule__Spell__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Spell__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpellAccess().getSpellKeyword_0()); }
	'Spell'
	{ after(grammarAccess.getSpellAccess().getSpellKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Spell__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Spell__Group__1__Impl
	rule__Spell__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Spell__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpellAccess().getNameAssignment_1()); }
	(rule__Spell__NameAssignment_1)
	{ after(grammarAccess.getSpellAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Spell__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Spell__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Spell__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpellAccess().getLevelAssignment_2()); }
	(rule__Spell__LevelAssignment_2)
	{ after(grammarAccess.getSpellAccess().getLevelAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Attack__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attack__Group__0__Impl
	rule__Attack__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attack__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttackAccess().getAttackKeyword_0()); }
	'Attack'
	{ after(grammarAccess.getAttackAccess().getAttackKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attack__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attack__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attack__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttackAccess().getDamageAssignment_1()); }
	(rule__Attack__DamageAssignment_1)
	{ after(grammarAccess.getAttackAccess().getDamageAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Move__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Move__Group__0__Impl
	rule__Move__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveAccess().getMoveKeyword_0()); }
	'Move'
	{ after(grammarAccess.getMoveAccess().getMoveKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Move__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveAccess().getDistanceAssignment_1()); }
	(rule__Move__DistanceAssignment_1)
	{ after(grammarAccess.getMoveAccess().getDistanceAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__History__ActionlistAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHistoryAccess().getActionlistCharacterActionParserRuleCall_0()); }
		ruleCharacterAction
		{ after(grammarAccess.getHistoryAccess().getActionlistCharacterActionParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CharacterAction__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCharacterActionAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getCharacterActionAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CharacterAction__ActionsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCharacterActionAccess().getActionsActionsParserRuleCall_2_0()); }
		ruleActions
		{ after(grammarAccess.getCharacterActionAccess().getActionsActionsParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LongRest__LevelAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLongRestAccess().getLevelINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getLongRestAccess().getLevelINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShortRest__HealingAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShortRestAccess().getHealingINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getShortRestAccess().getHealingINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Spell__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSpellAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getSpellAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Spell__LevelAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSpellAccess().getLevelINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getSpellAccess().getLevelINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attack__DamageAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttackAccess().getDamageINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getAttackAccess().getDamageINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__DistanceAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMoveAccess().getDistanceINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getMoveAccess().getDistanceINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
