/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.myDsl.Attack;
import org.xtext.example.mydsl.myDsl.CharacterAction;
import org.xtext.example.mydsl.myDsl.History;
import org.xtext.example.mydsl.myDsl.LongRest;
import org.xtext.example.mydsl.myDsl.Move;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.ShortRest;
import org.xtext.example.mydsl.myDsl.Spell;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.ATTACK:
				sequence_Attack(context, (Attack) semanticObject); 
				return; 
			case MyDslPackage.CHARACTER_ACTION:
				sequence_CharacterAction(context, (CharacterAction) semanticObject); 
				return; 
			case MyDslPackage.HISTORY:
				sequence_History(context, (History) semanticObject); 
				return; 
			case MyDslPackage.LONG_REST:
				sequence_LongRest(context, (LongRest) semanticObject); 
				return; 
			case MyDslPackage.MOVE:
				sequence_Move(context, (Move) semanticObject); 
				return; 
			case MyDslPackage.SHORT_REST:
				sequence_ShortRest(context, (ShortRest) semanticObject); 
				return; 
			case MyDslPackage.SPELL:
				sequence_Spell(context, (Spell) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Actions returns Attack
	 *     Attack returns Attack
	 *
	 * Constraint:
	 *     damage=INT
	 */
	protected void sequence_Attack(ISerializationContext context, Attack semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ATTACK__DAMAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ATTACK__DAMAGE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAttackAccess().getDamageINTTerminalRuleCall_1_0(), semanticObject.getDamage());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CharacterAction returns CharacterAction
	 *
	 * Constraint:
	 *     (name=ID actions+=Actions+)
	 */
	protected void sequence_CharacterAction(ISerializationContext context, CharacterAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     History returns History
	 *
	 * Constraint:
	 *     actionlist+=CharacterAction+
	 */
	protected void sequence_History(ISerializationContext context, History semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Actions returns LongRest
	 *     Rest returns LongRest
	 *     LongRest returns LongRest
	 *
	 * Constraint:
	 *     level=INT
	 */
	protected void sequence_LongRest(ISerializationContext context, LongRest semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.LONG_REST__LEVEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.LONG_REST__LEVEL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLongRestAccess().getLevelINTTerminalRuleCall_1_0(), semanticObject.getLevel());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Actions returns Move
	 *     Move returns Move
	 *
	 * Constraint:
	 *     distance=INT
	 */
	protected void sequence_Move(ISerializationContext context, Move semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.MOVE__DISTANCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.MOVE__DISTANCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMoveAccess().getDistanceINTTerminalRuleCall_1_0(), semanticObject.getDistance());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Actions returns ShortRest
	 *     Rest returns ShortRest
	 *     ShortRest returns ShortRest
	 *
	 * Constraint:
	 *     healing=INT
	 */
	protected void sequence_ShortRest(ISerializationContext context, ShortRest semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SHORT_REST__HEALING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SHORT_REST__HEALING));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getShortRestAccess().getHealingINTTerminalRuleCall_1_0(), semanticObject.getHealing());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Actions returns Spell
	 *     Spell returns Spell
	 *
	 * Constraint:
	 *     (name=ID level=INT)
	 */
	protected void sequence_Spell(ISerializationContext context, Spell semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SPELL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SPELL__NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SPELL__LEVEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SPELL__LEVEL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSpellAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSpellAccess().getLevelINTTerminalRuleCall_2_0(), semanticObject.getLevel());
		feeder.finish();
	}
	
	
}
