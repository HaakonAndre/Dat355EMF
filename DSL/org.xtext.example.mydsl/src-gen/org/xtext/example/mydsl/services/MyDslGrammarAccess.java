/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class HistoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.History");
		private final Assignment cActionlistAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cActionlistCharacterActionParserRuleCall_0 = (RuleCall)cActionlistAssignment.eContents().get(0);
		
		//History:
		//	actionlist+=CharacterAction*;
		@Override public ParserRule getRule() { return rule; }
		
		//actionlist+=CharacterAction*
		public Assignment getActionlistAssignment() { return cActionlistAssignment; }
		
		//CharacterAction
		public RuleCall getActionlistCharacterActionParserRuleCall_0() { return cActionlistCharacterActionParserRuleCall_0; }
	}
	public class CharacterActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CharacterAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCharacterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cActionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionsActionsParserRuleCall_2_0 = (RuleCall)cActionsAssignment_2.eContents().get(0);
		
		//CharacterAction:
		//	'Character' name=ID actions+=Actions+;
		@Override public ParserRule getRule() { return rule; }
		
		//'Character' name=ID actions+=Actions+
		public Group getGroup() { return cGroup; }
		
		//'Character'
		public Keyword getCharacterKeyword_0() { return cCharacterKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//actions+=Actions+
		public Assignment getActionsAssignment_2() { return cActionsAssignment_2; }
		
		//Actions
		public RuleCall getActionsActionsParserRuleCall_2_0() { return cActionsActionsParserRuleCall_2_0; }
	}
	public class ActionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Actions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRestParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSpellParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAttackParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMoveParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Actions:
		//	Rest | Spell | Attack | Move;
		@Override public ParserRule getRule() { return rule; }
		
		//Rest | Spell | Attack | Move
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Rest
		public RuleCall getRestParserRuleCall_0() { return cRestParserRuleCall_0; }
		
		//Spell
		public RuleCall getSpellParserRuleCall_1() { return cSpellParserRuleCall_1; }
		
		//Attack
		public RuleCall getAttackParserRuleCall_2() { return cAttackParserRuleCall_2; }
		
		//Move
		public RuleCall getMoveParserRuleCall_3() { return cMoveParserRuleCall_3; }
	}
	public class RestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Rest");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLongRestParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cShortRestParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Rest:
		//	LongRest | ShortRest;
		@Override public ParserRule getRule() { return rule; }
		
		//LongRest | ShortRest
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LongRest
		public RuleCall getLongRestParserRuleCall_0() { return cLongRestParserRuleCall_0; }
		
		//ShortRest
		public RuleCall getShortRestParserRuleCall_1() { return cShortRestParserRuleCall_1; }
	}
	public class LongRestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LongRest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLongRestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLevelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLevelINTTerminalRuleCall_1_0 = (RuleCall)cLevelAssignment_1.eContents().get(0);
		
		//LongRest:
		//	'LongRest' level=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'LongRest' level=INT
		public Group getGroup() { return cGroup; }
		
		//'LongRest'
		public Keyword getLongRestKeyword_0() { return cLongRestKeyword_0; }
		
		//level=INT
		public Assignment getLevelAssignment_1() { return cLevelAssignment_1; }
		
		//INT
		public RuleCall getLevelINTTerminalRuleCall_1_0() { return cLevelINTTerminalRuleCall_1_0; }
	}
	public class ShortRestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ShortRest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShortRestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHealingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHealingINTTerminalRuleCall_1_0 = (RuleCall)cHealingAssignment_1.eContents().get(0);
		
		//ShortRest:
		//	'ShortRest' healing=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'ShortRest' healing=INT
		public Group getGroup() { return cGroup; }
		
		//'ShortRest'
		public Keyword getShortRestKeyword_0() { return cShortRestKeyword_0; }
		
		//healing=INT
		public Assignment getHealingAssignment_1() { return cHealingAssignment_1; }
		
		//INT
		public RuleCall getHealingINTTerminalRuleCall_1_0() { return cHealingINTTerminalRuleCall_1_0; }
	}
	public class SpellElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Spell");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpellKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cLevelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLevelINTTerminalRuleCall_2_0 = (RuleCall)cLevelAssignment_2.eContents().get(0);
		
		//Spell:
		//	'Spell' name=ID level=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'Spell' name=ID level=INT
		public Group getGroup() { return cGroup; }
		
		//'Spell'
		public Keyword getSpellKeyword_0() { return cSpellKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//level=INT
		public Assignment getLevelAssignment_2() { return cLevelAssignment_2; }
		
		//INT
		public RuleCall getLevelINTTerminalRuleCall_2_0() { return cLevelINTTerminalRuleCall_2_0; }
	}
	public class AttackElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Attack");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttackKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDamageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDamageINTTerminalRuleCall_1_0 = (RuleCall)cDamageAssignment_1.eContents().get(0);
		
		//Attack:
		//	'Attack' damage=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'Attack' damage=INT
		public Group getGroup() { return cGroup; }
		
		//'Attack'
		public Keyword getAttackKeyword_0() { return cAttackKeyword_0; }
		
		//damage=INT
		public Assignment getDamageAssignment_1() { return cDamageAssignment_1; }
		
		//INT
		public RuleCall getDamageINTTerminalRuleCall_1_0() { return cDamageINTTerminalRuleCall_1_0; }
	}
	public class MoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Move");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMoveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDistanceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDistanceINTTerminalRuleCall_1_0 = (RuleCall)cDistanceAssignment_1.eContents().get(0);
		
		//Move:
		//	'Move' distance=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'Move' distance=INT
		public Group getGroup() { return cGroup; }
		
		//'Move'
		public Keyword getMoveKeyword_0() { return cMoveKeyword_0; }
		
		//distance=INT
		public Assignment getDistanceAssignment_1() { return cDistanceAssignment_1; }
		
		//INT
		public RuleCall getDistanceINTTerminalRuleCall_1_0() { return cDistanceINTTerminalRuleCall_1_0; }
	}
	
	
	private final HistoryElements pHistory;
	private final CharacterActionElements pCharacterAction;
	private final ActionsElements pActions;
	private final RestElements pRest;
	private final LongRestElements pLongRest;
	private final ShortRestElements pShortRest;
	private final SpellElements pSpell;
	private final AttackElements pAttack;
	private final MoveElements pMove;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pHistory = new HistoryElements();
		this.pCharacterAction = new CharacterActionElements();
		this.pActions = new ActionsElements();
		this.pRest = new RestElements();
		this.pLongRest = new LongRestElements();
		this.pShortRest = new ShortRestElements();
		this.pSpell = new SpellElements();
		this.pAttack = new AttackElements();
		this.pMove = new MoveElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//History:
	//	actionlist+=CharacterAction*;
	public HistoryElements getHistoryAccess() {
		return pHistory;
	}
	
	public ParserRule getHistoryRule() {
		return getHistoryAccess().getRule();
	}
	
	//CharacterAction:
	//	'Character' name=ID actions+=Actions+;
	public CharacterActionElements getCharacterActionAccess() {
		return pCharacterAction;
	}
	
	public ParserRule getCharacterActionRule() {
		return getCharacterActionAccess().getRule();
	}
	
	//Actions:
	//	Rest | Spell | Attack | Move;
	public ActionsElements getActionsAccess() {
		return pActions;
	}
	
	public ParserRule getActionsRule() {
		return getActionsAccess().getRule();
	}
	
	//Rest:
	//	LongRest | ShortRest;
	public RestElements getRestAccess() {
		return pRest;
	}
	
	public ParserRule getRestRule() {
		return getRestAccess().getRule();
	}
	
	//LongRest:
	//	'LongRest' level=INT;
	public LongRestElements getLongRestAccess() {
		return pLongRest;
	}
	
	public ParserRule getLongRestRule() {
		return getLongRestAccess().getRule();
	}
	
	//ShortRest:
	//	'ShortRest' healing=INT;
	public ShortRestElements getShortRestAccess() {
		return pShortRest;
	}
	
	public ParserRule getShortRestRule() {
		return getShortRestAccess().getRule();
	}
	
	//Spell:
	//	'Spell' name=ID level=INT;
	public SpellElements getSpellAccess() {
		return pSpell;
	}
	
	public ParserRule getSpellRule() {
		return getSpellAccess().getRule();
	}
	
	//Attack:
	//	'Attack' damage=INT;
	public AttackElements getAttackAccess() {
		return pAttack;
	}
	
	public ParserRule getAttackRule() {
		return getAttackAccess().getRule();
	}
	
	//Move:
	//	'Move' distance=INT;
	public MoveElements getMoveAccess() {
		return pMove;
	}
	
	public ParserRule getMoveRule() {
		return getMoveAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
